import streamlit as st
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import plotly.express as px
import pandas as pd
import numpy as np
import warnings
import folium
from streamlit_folium import st_folium
from prophet import Prophet

warnings.filterwarnings('ignore')

# ---------------------- PARAM√àTRES G√âN√âRAUX ----------------------
st.set_page_config(page_title="Les Derniers Flocons", layout="wide")

@st.cache_data
def load_data_full():
    df_full = pd.read_csv("donnees_meteo_avec_stations_et_altitudes_full.csv")
    # Convertir les dates et exclure 2025
    df_full['date'] = pd.to_datetime(df_full['date'])
    df_full['year'] = df_full['date'].dt.year

    df_filtered = df_full[df_full['year'] < 2025]
    df_filtered2 = df_full[df_full['date'] < '2024-08-01']
    df_filtered2['season'] = df_filtered2['date'].apply(lambda x: x.year if x.month >= 8 else x.year - 1)

    # Moyennes annuelles
    df_yearly = df_full.groupby('year')[['rain_sum', 'snowfall_water_equivalent_sum']].sum().reset_index()
    df_yearly = df_yearly[df_yearly['year'] != 2025]
    df_yearly_mean = df_filtered.groupby('year')['temperature_2m_mean'].mean().reset_index()
    df_yearly_mean2 = df_filtered.groupby('year')['rain_sum'].mean().reset_index()
    df_yearly_mean3 = df_filtered.groupby('year')['snowfall_sum'].mean().reset_index()
    seasonal_snowfall = df_filtered2.groupby('season')['snowfall_sum'].sum().reset_index()
    seasonal_snowfall['snowfall_sum'] = seasonal_snowfall['snowfall_sum'] / 1000
    seasonal_snowfall = seasonal_snowfall.sort_values('season')
    # Variables pour la tendance quadratique
    x1 = df_yearly_mean['year']
    y1 = df_yearly_mean['temperature_2m_mean']
    x2 = df_yearly_mean2['year']
    y2 = df_yearly_mean2['rain_sum']
    x3 = df_yearly_mean3['year']
    y3 = df_yearly_mean3['snowfall_sum']
    # Calcul de la tendance quadratique
    coef_quad = np.polyfit(x1, y1, deg=2)
    coef_quad2 = np.polyfit(x2, y2, deg=2)
    coef_quad3 = np.polyfit(x3, y3, deg=2)
    quad_curve = np.poly1d(coef_quad)
    quad_curve2 = np.poly1d(coef_quad2)
    quad_curve3 = np.poly1d(coef_quad3)

    return df_full, x1, y1, x2, y2, x3, y3, df_yearly, seasonal_snowfall, quad_curve, quad_curve2, quad_curve3  # Retourne aussi x1, y1 et quad_curve

@st.cache_data
def load_data_prophet():
    df_prophet = pd.read_csv("donnees_meteo_148_stations.csv")
    stations_fermees = [
    "Alex", "Bozel", "Brison", "Burzier", "Cellier Valmorel", "Chamonix - les P√®lerins",
    "Col de Creusaz", "Col des Aravis", "Col du Champet", "Col du Chaussy", "Col du Fr√™ne",
    "Col du Galibier", "Col du Plainpalais", "Col du Pr√©", "Col du Sommeiller", "Col du Tami√©",
    "Crey Rond", "Doucy en Bauges", "Drouzin-Le-Mont", "Entremont", "Granier sur Aime",
    "Jarrier - La Tuvi√®re", "La Sambuy", "Le Bouchet - Mont Charvin", "Le Cry - Salvagny",
    "Le Petit Bornand", "Les Bossons - Chamonix", "Marthod", "Molliessoulaz", "Montisel",
    "Notre Dame du pr√©", "Richebourg", "Saint Nicolas la Chapelle", "Saint-Jean de Sixt",
    "Sainte Foy", "Saxel", "Serraval", "Seytroux", "Sixt Fer √† Cheval", "St-Pierre d'Entremont",
    "Termignon", "Th√¥nes", "Thorens Gli√®res", "Ugine", "Val Pelouse",
    "Verthemex - Mont du Chat", "Villards sur Th√¥nes"
    ]
    for station in stations_fermees:
        suppression = df_prophet[df_prophet["stations"].apply(lambda x: station in x)].index
        df_prophet = df_prophet.drop(suppression)
    df_prophet = df_prophet.drop(columns=["Unnamed: 0_x", "Unnamed: 0_y", "latitude", "longitude", "snowfall_water_equivalent_sum", "wind_speed_10m_mean", "soil_temperature_0_to_100cm_mean", "temperature_2m_max", "sunshine_duration","temperature_2m_mean", "cloud_cover_mean","rain_sum",
       "temperature_2m_min"], axis=1)
    df_prophet.loc[:, "snowfall_sum"] = df_prophet["snowfall_sum"] / 100
    
    return df_prophet

@st.cache_data
def load_data_prophet2():
    df_prophet2 = pd.read_csv("donnees_meteo_148_stations.csv")

    stations_fermees = [
    "Alex", "Bozel", "Brison", "Burzier", "Cellier Valmorel", "Chamonix - les P√®lerins",
    "Col de Creusaz", "Col des Aravis", "Col du Champet", "Col du Chaussy", "Col du Fr√™ne",
    "Col du Galibier", "Col du Plainpalais", "Col du Pr√©", "Col du Sommeiller", "Col du Tami√©",
    "Crey Rond", "Doucy en Bauges", "Drouzin-Le-Mont", "Entremont", "Granier sur Aime",
    "Jarrier - La Tuvi√®re", "La Sambuy", "Le Bouchet - Mont Charvin", "Le Cry - Salvagny",
    "Le Petit Bornand", "Les Bossons - Chamonix", "Marthod", "Molliessoulaz", "Montisel",
    "Notre Dame du pr√©", "Richebourg", "Saint Nicolas la Chapelle", "Saint-Jean de Sixt",
    "Sainte Foy", "Saxel", "Serraval", "Seytroux", "Sixt Fer √† Cheval", "St-Pierre d'Entremont",
    "Termignon", "Th√¥nes", "Thorens Gli√®res", "Ugine", "Val Pelouse",
    "Verthemex - Mont du Chat", "Villards sur Th√¥nes"
    ]
    for station in stations_fermees:
        suppression = df_prophet2[df_prophet2["stations"].apply(lambda x: station in x)].index
        df_prophet2 = df_prophet2.drop(suppression)

    df_prophet2 = df_prophet2.drop(columns=["Unnamed: 0_x", "Unnamed: 0_y", "latitude", "longitude", "snowfall_water_equivalent_sum","snowfall_sum", "wind_speed_10m_mean", "soil_temperature_0_to_100cm_mean", "temperature_2m_max", "sunshine_duration", "cloud_cover_mean","rain_sum",
       "temperature_2m_min"], axis=1)
    
    return df_prophet2

@st.cache_data
def load_data_result():
    df_result = pd.read_csv("df_combined_cox_results.csv")  
    return df_result

# Charger les donn√©es
df_meteo_full, x1, y1, x2, y2, x3, y3, df_yearly, seasonal_snowfall, quad_curve, quad_curve2, quad_curve3 = load_data_full()  # On r√©cup√®re les variables n√©cessaires
df_prophet = load_data_prophet()
df_prophet2 = load_data_prophet2()
df_result = load_data_result()

# ---------------------- TITRE PRINCIPAL ----------------------
st.title(":snowflake: Les Derniers Flocons")
st.markdown('<style>div.block-container{padding-top:3rem;}</style>', unsafe_allow_html=True)

st.markdown("""
    <style>
    div.stButton > button {
        padding: 0.75rem 1.5rem;
        font-size: 1.2rem;
        font-weight: bold;
        border-radius: 8px;
        margin: 5px;
        background-color: #f0f2f6;
        border: 1px solid #dcdcdc;
        color: #000000;
    }
    </style>
""", unsafe_allow_html=True)

if "active_tab" not in st.session_state:
    st.session_state.active_tab = ":derelict_house_building: Accueil"

col1, col2, col3, col4, col5, col6 = st.columns(6)

with col1:
    if st.button(":derelict_house_building: Accueil"):
        st.session_state.active_tab = ":derelict_house_building: Accueil"
with col2:
    if st.button(":information_source: √Ä Propos"):
        st.session_state.active_tab = ":information_source: √Ä Propos"
with col3:
    if st.button(":bar_chart: Visualisation des Donn√©es M√©t√©o"):
        st.session_state.active_tab = ":bar_chart: Visualisation des Donn√©es M√©t√©o"
with col4:
    if st.button("üìàTendances M√©t√©orologiques"):
        st.session_state.active_tab = "üìàTendances M√©t√©orologiques"
with col5:
    if st.button(":snow_cloud: Ma Station"):
        st.session_state.active_tab = ":snow_cloud: Ma Station"
with col6:
    if st.button(":mag_right: Stations √† Risques"):
        st.session_state.active_tab = ":mag_right: Stations √† Risques"

# ---------------------- ACCUEIL ----------------------
if st.session_state.active_tab == ":derelict_house_building: Accueil":
    container_accueil = st.container(border=True)
    container_accueil2 = st.container(border=True)

    # Utiliser df_meteo_full ici pour avoir toutes les stations
    df = df_meteo_full.drop_duplicates(subset=['latitude', 'longitude'])

    # Cr√©er la carte de base avec un centre d√©fini et un zoom par d√©faut
    m = folium.Map(location=[46.0, 7.5], zoom_start=8)

    # Ajouter des marqueurs pour chaque station de ski dans df_meteo_full
    for _, row in df.iterrows():
        folium.Marker(
            location=[row['latitude'], row['longitude']],
            popup=f"Station: {row['stations']}<br>Altitude: {row['altitude']}m",
            icon=folium.Icon(color='blue')
        ).add_to(m)

    # Affichage du titre de la page
    container_homeTitle = st.container(border=True)
    container_homeTitle.header(":world_map: Carte des stations de ski des Alpes")

    # Affichage de la carte dans Streamlit
    st_folium(m, width=1500)    
    container_accueil2.markdown("Bienvenue sur **Les Derniers Flocons**, un projet visant √† fournir des pr√©dictions quant aux potentielles fermetures des stations de ski alpines.")
    container_accueil2.markdown("R√©alisation par Ambre TRAN, Andreea LOUISON, Mathilde REJASSE et Nicolas Saad FORTUIT.")

# ---------------------- √Ä PROPOS ----------------------
elif st.session_state.active_tab == ":information_source: √Ä Propos":
    # container_apropos = st.container(border=True)
    container_apropos2 = st.container(border=True)
    # Titre combin√© "Description et Contexte du Projet"
    # container_apropos.header(":snowboarder: Contexte")
    texte = """
***Objectif du projet***\n
Le projet ¬´ Les Derniers Flocons ¬ª vise √† anticiper l‚Äôimpact du changement climatique sur l‚Äôactivit√© des stations de ski.
En s‚Äôappuyant sur des donn√©es m√©t√©orologiques historiques (depuis 1970) et des mod√®les de pr√©vision,
l‚Äôapplication estime l‚Äô√©volution future de la neige et de la temp√©rature afin de pr√©dire les risques de fermeture des stations √† une date donn√©e.
Cette plateforme, d√©velopp√©e sous Streamlit, s‚Äôadresse principalement aux professionnels de la montagne (gestionnaires de stations, exploitants touristiques)
ainsi qu‚Äôaux d√©cideurs publics.\n

***Donn√©es utilis√©es***\n
Les donn√©es proviennent de l‚ÄôAPI open-meteo.com et couvrent 148 stations de ski situ√©es dans les Alpes fran√ßaises.
Elles int√®grent des mesures journali√®res agr√©g√©es:\n
- Temp√©rature moyenne de l‚Äôair,\n
- Temp√©rature du sol (de 0 √† -100 cm),\n
- Somme des chutes de neige,\n
- √âquivalent en eau des chutes de neige,\n
- Somme des pr√©cipitations pluvieuses,\n
- Dur√©e d‚Äôensoleillement,\n
- Vitesse moyenne du vent,\n
- Couverture nuageuse,\n
Des informations sur les stations d√©j√† ferm√©es (incluant leur date de fermeture) ont √©galement √©t√© collect√©es afin d‚Äôentra√Æner un mod√®le pr√©dictif.\n

***M√©thodologie***\n
- Collecte & nettoyage des donn√©es.\n
- Scraping des stations de ski (Savoie, Haute-Savoie, Is√®re).\n
- R√©cup√©ration des coordonn√©es GPS et de l‚Äôaltitude.\n
- Extraction via API des donn√©es m√©t√©orologiques historiques (1970‚Äì2024).\n
- Int√©gration des dates de fermeture pour les stations d√©j√† inactives.\n
- D√©tection et correction des valeurs aberrantes.\n
***Analyse exploratoire***\n
- √âtude des tendances saisonni√®res et climatiques.\n
- Comparaisons par altitude et r√©gion.\n

***Mod√©lisation & pr√©vision***\n
- Visualisation de l‚Äô√©volution climatique station par station.\n
- Mod√©lisation des s√©ries temporelles avec Prophet (temp√©ratures, neige).\n
- Analyse de survie (survival analysis) pour estimer le risque de fermeture dans le temps.\n

***Perspectives***\n
Cette application souhaite contribuer √† une meilleure prise de d√©cision pour l‚Äôavenir de la montagne.
En √©clairant les tendances climatiques locales, elle permet d‚Äôanticiper les enjeux li√©s √† l‚Äôenneigement, √† l‚Äô√©conomie des sports d‚Äôhiver et √† l‚Äôadaptation des territoires alpins face aux changements en cours.\n
"""
    colAbout1, colAbout2 = st.columns(2)
    with colAbout1:
        container_apropos3 = st.container(border=True)
        container_apropos3.markdown(texte)

    # with colAbout1:
    #     # st.markdown("&√©")
    #     container_apropos2.image("123.webp", use_column_width=True)
    with colAbout2:
        containerAboutImg = st.container(border=True)
        containerAboutImg.image("image1.png", use_column_width=True)
        containerAboutImg2 = st.container(border=True)
        containerAboutImg2.image("image2.png", use_column_width=True)
        containerAboutImg3 = st.container(border=True)
        containerAboutImg3.image("image3.png", use_column_width=True)





# ---------------------- Analyse des Donn√©es M√©t√©o ----------------------
elif st.session_state.active_tab == ":bar_chart: Visualisation des Donn√©es M√©t√©o":

    col_edafig1, col_edaint1 = st.columns(2)
    with col_edafig1:
        container_fig1 = st.container(border=True)
        with container_fig1:
            fig1, ax1 = plt.subplots(figsize=(12, 5))
            ax1.plot(x1, y1, marker='o', color='orange', label='Temp√©rature moyenne annuelle')

            ax1.set_title("√âvolution des temp√©ratures moyennes annuelles")
            ax1.set_xlabel("Ann√©e")
            ax1.set_ylabel("Temp√©rature moyenne (¬∞C)")
            ax1.grid(True, linestyle='--', alpha=0.5)
            ax1.legend()

            # G√©n√©rer les ticks Y arrondis √† 2 d√©cimales
            yticks = np.arange(y1.min(), y1.max() + 0.5, 0.5)
            ax1.set_yticks(yticks)
            ax1.set_yticklabels([f"{tick:.2f}" for tick in yticks])  # Format 0.01

            ax1.set_xticks(range(int(x1.min()), int(x1.max()) + 1, 5))

            plt.tight_layout()
            st.pyplot(fig1)
    with col_edaint1:
        container_titleint1 = st.container(border=True)
        container_int1 = st.container(border=True)
        container_titleint1.markdown(":question: **Interpr√©tation:**")
        with container_int1:
            texte2 = """ Ce graphique montre l'√©volution de la temp√©rature moyenne annuelle (en orange) au fil des ann√©es.

La courbe orange repr√©sente les donn√©es r√©elles de temp√©rature moyenne annuelle, illustrant une tendance globale √† la hausse des temp√©ratures.

En observant cette courbe, on peut remarquer que les temp√©ratures semblent augmenter avec le temps, bien qu‚Äôil puisse y avoir des fluctuations d‚Äôune ann√©e √† l‚Äôautre.

Cela refl√®te une √©volution probable li√©e au r√©chauffement climatique, indiquant une hausse progressive des temp√©ratures au fil des d√©cennies."""
            st.markdown(texte2)

    col_edafig2, col_edaint2 = st.columns(2)
    with col_edafig2:
        container_fig2 = st.container(border=True)
        with container_fig2:
            fig2, ax2 = plt.subplots(figsize=(10, 8))
            # Graphique en barres horizontales empil√©es
            ax2.barh(df_yearly['year'], df_yearly['rain_sum'], label='Pluie', alpha=0.7)
            ax2.barh(
                df_yearly['year'],
                df_yearly['snowfall_water_equivalent_sum'],
                left=df_yearly['rain_sum'],
                label='Neige (√©quivalent eau)',
                alpha=0.7
            )

            # Mise en forme
            ax2.set_title('Cumul annuel des pr√©cipitations (pluie + √©quivalent neige en eau)', fontsize=14)
            ax2.set_ylabel('Ann√©e')
            ax2.set_xlabel('Pr√©cipitations totales (mm)')
            ax2.set_yticks(df_yearly['year'])
            ax2.legend()
            ax2.grid(axis='x', linestyle='--', alpha=0.5)
            plt.tight_layout()

# Affichage dans Streamlit
            st.pyplot(fig2)
    with col_edaint2:
        container_titleint2 = st.container(border=True)
        container_int2 = st.container(border=True)
        container_titleint2.markdown(":question: **Interpr√©tation:**")
        with container_int2:
            texte3 = """ Ce graphique montre le cumul annuel des pr√©cipitations, en s√©parant pluie et neige (convertie en √©quivalent eau).
Il permet d‚Äôobserver l‚Äô√©volution globale des pr√©cipitations au fil des ann√©es.

Une baisse de la part de neige au profit de la pluie peut indiquer un r√©chauffement.
Les variations d‚Äôune ann√©e √† l‚Äôautre refl√®tent la variabilit√© climatique. """
            st.markdown(texte3)

    col_edafig3, col_edaint3 = st.columns(2)
    with col_edafig3:
        container_fig3 = st.container(border=True)
        with container_fig3:
            fig3, ax3 = plt.subplots(figsize=(10, 6))
            ax3.plot(seasonal_snowfall['season'], seasonal_snowfall['snowfall_sum'], marker='o', color='steelblue')
            ax3.set_xlabel('Saison')
            ax3.set_ylabel('Chutes de neige totales (m√®tres)')
            ax3.set_title('Cumul des chutes de neige par saison ‚Äì Toutes stations')
            ax3.grid(True, linestyle='--', alpha=0.5)
            plt.tight_layout()
            st.pyplot(fig3)
    with col_edaint3:
        container_titleint3 = st.container(border=True)
        container_int3 = st.container(border=True)
        container_titleint3.markdown(":question: **Interpr√©tation:**")
        with container_int3:
            texte4 = """ Ce graphique pr√©sente le cumul total des chutes de neige par saison, toutes stations confondues.
Chaque point repr√©sente la quantit√© totale de neige tomb√©e pendant une saison hivernale donn√©e.

On y observe les variations interannuelles : certaines saisons se d√©marquent par des chutes particuli√®rement importantes, tandis que d'autres affichent un enneigement plus faible.
Cette visualisation permet de d√©tecter d'√©ventuelles tendances, comme une baisse progressive des cumuls de neige, pouvant √™tre li√©e aux effets du r√©chauffement climatique ou √† des anomalies saisonni√®res.

Elle est utile pour comprendre l‚Äô√©volution globale de l‚Äôenneigement √† l‚Äô√©chelle r√©gionale."""
            st.markdown(texte4)

# ---------------------- Tendances M√©t√©o ----------------------

elif st.session_state.active_tab == "üìàTendances M√©t√©orologiques":

    colv1, colv2 = st.columns(2)
    with colv1:
        st.container(border=True).subheader(":book: Historiques et Pr√©visions Neigeuses par Altitude")
    with colv2:
        st.container(border=True).subheader(":book: Historiques et Pr√©visions de Temp√©ratures par Altitude")

    # Pr√©paration des donn√©es
    df_selection = df_prophet.copy()
    df_selection['ds'] = pd.to_datetime(df_selection['date']).dt.tz_localize(None)
    df_selection = df_selection.rename(columns={'snowfall_sum': 'y'})
    df_selection = df_selection[df_selection['ds'] < "2025-01-01"]

    df_selection2 = df_prophet2.copy()
    df_selection2['ds'] = pd.to_datetime(df_selection2['date']).dt.tz_localize(None)
    df_selection2 = df_selection2.rename(columns={'temperature_2m_mean': 'y'})
    df_selection2 = df_selection2[df_selection2['ds'] < "2025-01-01"]

    def afficher_double_prevision(df_neige, df_temp, condition, titre_neige, titre_temp, interpretation_neige, interpretation_temp, ylim_neige=(1, 8), ylim_temp=(0, 12)):

        # Pr√©paration des donn√©es neige
        df_n = df_neige[condition]
        df_n = df_n.set_index('ds').resample('YS').agg({'y': 'mean', 'altitude': 'first'}).dropna().reset_index()
        df_n['y'] *= 365

        # Pr√©paration des donn√©es temp√©rature
        df_t = df_temp[condition]
        df_t = df_t.set_index('ds').resample('YS').agg({'y': 'mean', 'altitude': 'first'}).dropna().reset_index()

        col1, col2 = st.columns(2)

        # Affichage graphique neige
        if len(df_n) >= 3:
            with col1:
                model_n = Prophet(yearly_seasonality=False, daily_seasonality=False, weekly_seasonality=False,
                                  changepoint_prior_scale=1, seasonality_prior_scale=10)
                model_n.fit(df_n[['ds', 'y']])
                future_n = model_n.make_future_dataframe(5, freq='YS')
                forecast_n = model_n.predict(future_n)
                fig_n = model_n.plot(forecast_n)
                plt.ylim(ylim_neige)
                plt.title(titre_neige)
                plt.xlabel("Date")
                plt.ylabel("Cumul de neige (m)")
                plt.grid(True, linestyle='--', alpha=0.5)
                st.container(border=True).pyplot(fig_n)
                with st.container(border=True):
                    st.markdown(":question: **Interpr√©tation :**")
                    st.markdown(interpretation_neige)
        else:
            st.warning(f"Pas assez de donn√©es pour la pr√©vision neige ({titre_neige})")

        # Affichage graphique temp√©rature
        if len(df_t) >= 3:
            with col2:
                model_t = Prophet(yearly_seasonality=False, daily_seasonality=False, weekly_seasonality=False,
                                  changepoint_prior_scale=1, seasonality_prior_scale=10)
                model_t.fit(df_t[['ds', 'y']])
                future_t = model_t.make_future_dataframe(5, freq='YS')
                forecast_t = model_t.predict(future_t)
                fig_t = model_t.plot(forecast_t)
                fig_t.axes[0].get_lines()[0].set_color('darkorange')           # courbe temp√©rature
                fig_t.axes[0].collections[0].set_facecolor('moccasin')         # zone d'incertitude

                plt.ylim(ylim_temp)
                plt.yticks(range(1, 13))
                plt.title(titre_temp)
                plt.xlabel("Date")
                plt.ylabel("Temp√©rature (¬∞C)")
                plt.grid(True, linestyle='--', alpha=0.5)
                st.container(border=True).pyplot(fig_t)
                with st.container(border=True):
                    st.markdown(":question: **Interpr√©tation :**")
                    st.markdown(interpretation_temp)
        else:
            st.warning(f"Pas assez de donn√©es pour la pr√©vision temp√©rature ({titre_temp})")

    # ================= Pr√©visions par tranche =================

    # 1. Toutes stations confondues
    afficher_double_prevision(
        df_selection, df_selection2,
        condition=slice(None),
        titre_neige="Pr√©vision annuelle des chutes de neige - toutes stations",
        titre_temp="Pr√©vision annuelle des temp√©ratures moyennes - toutes stations",
        interpretation_neige="""
Ce graphique agr√®ge les chutes de neige de toutes les stations m√©t√©o situ√©es en Savoie, Haute-Savoie et Is√®re.  
Il met en lumi√®re les tendances climatiques globales qui affectent l‚Äôensemble des massifs, toutes altitudes confondues.  
On peut ainsi observer si une diminution g√©n√©ralis√©e du cumul neigeux annuel se dessine, ce qui aurait un impact direct sur l‚Äô√©conomie touristique hivernale.
""",
        interpretation_temp="""
Ce graphique regroupe la temp√©rature moyenne annuelle de toutes les stations.  
On y d√©c√®le les effets du r√©chauffement climatique √† l‚Äô√©chelle r√©gionale.  
L‚Äô√©l√©vation de la temp√©rature moyenne sur plusieurs ann√©es cons√©cutives est un indicateur fort du bouleversement climatique en cours.
"""
    )

    # 2. Altitude < 1000m
    afficher_double_prevision(
        df_selection, df_selection2,
        condition=(df_selection["altitude"] < 1000),
        titre_neige="Neige annuelle - Altitude < 1000m",
        titre_temp="Temp√©ratures annuelles - Altitude < 1000m",
        interpretation_neige="""
Les zones situ√©es sous 1000 m√®tres sont les premi√®res √† souffrir de la rar√©faction de la neige naturelle.  
Les hivers doux y entra√Ænent souvent une absence totale de couche neigeuse, ou des p√©riodes tr√®s courtes d'enneigement.  
Les pr√©visions ici servent d‚Äôalerte pour les stations de basse altitude, souvent d√©pendantes de la neige de culture.
""",
        interpretation_temp="""
Les temp√©ratures dans cette tranche sont particuli√®rement sensibles √† la hausse des moyennes hivernales.  
M√™me une faible √©l√©vation provoque une disparition progressive des conditions favorables √† la neige.  
L‚Äô√©volution actuelle sugg√®re que les hivers seront de moins en moins rigoureux, avec un impact fort sur la biodiversit√© locale.
"""
    )

    # 3. Altitude 1000m √† 1300m
    afficher_double_prevision(
        df_selection, df_selection2,
        condition=(df_selection["altitude"] >= 1000) & (df_selection["altitude"] < 1300),
        titre_neige="Neige annuelle - 1000 √† 1300m",
        titre_temp="Temp√©ratures annuelles - 1000 √† 1300m",
        interpretation_neige="""
Cette tranche d‚Äôaltitude constitue une zone charni√®re : encore parfois enneig√©e naturellement, mais de plus en plus fragile face au r√©chauffement.  
Les pr√©visions ici permettent d‚Äôanticiper l‚Äô√©volution des conditions pour les petites stations et les zones de moyenne montagne.
""",
        interpretation_temp="""
La temp√©rature dans cette zone monte plus lentement qu‚Äôen plaine, mais les effets s‚Äôaccumulent.  
On observe une tendance de fond √† l‚Äôaugmentation des temp√©ratures moyennes, ce qui peut compromettre la tenue de la neige sur plusieurs hivers cons√©cutifs.
"""
    )

    # 4. Altitude 1300m √† 1600m
    afficher_double_prevision(
        df_selection, df_selection2,
        condition=(df_selection["altitude"] >= 1300) & (df_selection["altitude"] < 1600),
        titre_neige="Neige annuelle - 1300 √† 1600m",
        titre_temp="Temp√©ratures annuelles - 1300 √† 1600m",
        interpretation_neige="""
Ce niveau d‚Äôaltitude offre encore aujourd‚Äôhui de bonnes conditions pour la neige.  
Cependant, les pr√©visions montrent des signes de d√©clin progressif du cumul annuel, ce qui doit inciter √† la vigilance √† moyen terme.
""",
        interpretation_temp="""
Les temp√©ratures restent relativement basses dans cette tranche, mais la hausse progressive risque d‚Äôentra√Æner une r√©duction de la dur√©e d‚Äôenneigement.  
C‚Äôest une zone strat√©gique o√π l‚Äôadaptation est encore possible, mais qui n√©cessitera des investissements pour rester viable.
"""
    )

    # 5. Altitude > 1600m
    afficher_double_prevision(
        df_selection, df_selection2,
        condition=(df_selection["altitude"] >= 1600),
        titre_neige="Neige annuelle - > 1600m",
        titre_temp="Temp√©ratures annuelles - > 1600m",
        interpretation_neige="""
Les stations situ√©es au-dessus de 1600 m√®tres b√©n√©ficient encore d‚Äôun enneigement r√©gulier et important.  
Ces zones sont les plus r√©silientes face aux changements climatiques, et restent les plus s√ªres pour les activit√©s de sports d‚Äôhiver.  
Mais m√™me ici, une baisse tendancielle √† long terme pourrait appara√Ætre si le r√©chauffement se poursuit.
""",
        interpretation_temp="""
Les temp√©ratures y restent relativement stables, mais l‚Äôaugmentation lente et continue peut progressivement modifier la qualit√© de la neige.  
Cette altitude est cruciale pour maintenir l‚Äôactivit√© touristique hivernale : surveiller son √©volution est indispensable √† long terme.
"""
    )

# ---------------------- Ma Station ----------------------

elif st.session_state.active_tab == ":snow_cloud: Ma Station":
    st.markdown("## :mag_right: Analyse climatique par station", unsafe_allow_html=True)

    # Selectbox pleine largeur
    station_selectionnee = st.selectbox(
        label="**S√©lectionnez une station m√©t√©o :**",
        options=sorted(df_prophet["stations"].unique()),
        key="station_met",
        label_visibility="visible"
    )

    # V√©rification de s√©lection
    if station_selectionnee:
        # ========================== PR√âVISION NEIGE ==========================
        df_neige_station = df_prophet[df_prophet["stations"] == station_selectionnee].copy()
        df_neige_station['ds'] = pd.to_datetime(df_neige_station['date']).dt.tz_localize(None)
        df_neige_station = df_neige_station.rename(columns={'snowfall_sum': 'y'})
        df_neige_station = df_neige_station[df_neige_station['ds'] < "2025-01-01"]

        df_neige_agg = (
            df_neige_station
            .set_index('ds')
            .resample('YS')
            .agg({'y': 'sum', 'altitude': 'first'})
            .dropna()
            .reset_index()
        )

        # ========================== PR√âVISION TEMP√âRATURE ==========================
        df_temp_station = df_prophet2[df_prophet2["stations"] == station_selectionnee].copy()
        df_temp_station['ds'] = pd.to_datetime(df_temp_station['date']).dt.tz_localize(None)
        df_temp_station = df_temp_station.rename(columns={'temperature_2m_mean': 'y'})
        df_temp_station = df_temp_station[df_temp_station['ds'] < "2025-01-01"]

        df_temp_agg = (
            df_temp_station
            .set_index('ds')
            .resample('YS')
            .agg({'y': 'mean', 'altitude': 'first'})
            .dropna()
            .reset_index()
        )

        # Affichage en deux colonnes
        col1, col2 = st.columns(2)

        # ========================== GRAPHIQUE NEIGE ==========================
        with col1:
            if len(df_neige_agg) >= 3:
                model_neige = Prophet(
                    yearly_seasonality=False,
                    daily_seasonality=False,
                    weekly_seasonality=False,
                    changepoint_prior_scale=1,
                    seasonality_prior_scale=10
                )
                model_neige.fit(df_neige_agg[['ds', 'y']])
                future_neige = model_neige.make_future_dataframe(periods=5, freq='YS')
                forecast_neige = model_neige.predict(future_neige)
                fig_neige = model_neige.plot(forecast_neige)
                plt.title(f"Pr√©vision annuelle des chutes de neige ‚Äì {station_selectionnee}")
                plt.xlabel("Ann√©e")
                plt.ylabel("Cumul neige (m)")
                plt.grid(True, linestyle='--', alpha=0.5)
                plt.tight_layout()
                st.container(border=True).pyplot(fig_neige)

                with st.container(border=True):
                    st.markdown(":question: **Interpr√©tation :**")
                    st.markdown(f"""
Ce graphique montre les pr√©visions des chutes de neige annuelles pour la station **{station_selectionnee}**.  
Gr√¢ce aux donn√©es historiques, le mod√®le **Prophet** extrapole les cumuls de neige possibles jusqu‚Äôen 2029.  
La tendance r√©v√©l√©e permet d‚Äôanticiper la viabilit√© future de l‚Äôactivit√© hivernale √† cette altitude.  
Une baisse progressive pourrait indiquer une vuln√©rabilit√© accrue aux effets du r√©chauffement climatique.
""")
            else:
                st.warning("Pas assez de donn√©es pour la pr√©vision des chutes de neige.")

        # ========================== GRAPHIQUE TEMP√âRATURE ==========================
        with col2:
            if len(df_temp_agg) >= 3:
                model_temp = Prophet(
                    yearly_seasonality=False,
                    daily_seasonality=False,
                    weekly_seasonality=False,
                    changepoint_prior_scale=1,
                    seasonality_prior_scale=10
                )
                model_temp.fit(df_temp_agg[['ds', 'y']])
                future_temp = model_temp.make_future_dataframe(periods=5, freq='YS')
                forecast_temp = model_temp.predict(future_temp)
                # fig_temp = model_temp.plot(forecast_temp)
                fig_temp = model_temp.plot(forecast_temp)
                fig_temp.axes[0].get_lines()[0].set_color('darkorange')           # courbe temp√©rature
                fig_temp.axes[0].collections[0].set_facecolor('moccasin')         # zone d'incertitude
                plt.title(f"Pr√©vision annuelle des temp√©ratures moyennes ‚Äì {station_selectionnee}")
                plt.xlabel("Ann√©e")
                plt.ylabel("Temp√©rature moyenne (¬∞C)")
                plt.grid(True, linestyle='--', alpha=0.5)
                plt.tight_layout()
                st.container(border=True).pyplot(fig_temp)

                with st.container(border=True):
                    st.markdown(":question: **Interpr√©tation :**")
                    st.markdown(f"""
Ce graphique pr√©sente l‚Äô√©volution des **temp√©ratures moyennes annuelles** enregistr√©es √† **{station_selectionnee}**.  
Le mod√®le **Prophet** capte les tendances √† long terme et projette leur poursuite sur les prochaines ann√©es.  
Une pente ascendante signale un r√©chauffement local progressif, avec des cons√©quences possibles sur la **dur√©e d‚Äôenneigement**, la biodiversit√© et l‚Äô√©cosyst√®me de montagne.  
C‚Äôest un indicateur cl√© pour suivre l'impact du changement climatique station par station.
""")
            else:
                st.warning("Pas assez de donn√©es pour la pr√©vision des temp√©ratures.")
    else:
        st.info("Veuillez s√©lectionner une station.")


# ---------------------- Stations √† risque ----------------------
elif st.session_state.active_tab == ":mag_right: Stations √† Risques":
    container_analyses = st.container()
    col_analyse1, col_analyse2 = st.columns(2)

    with col_analyse1:
        modele_1 = st.container()
        modele_1des = st.container()
        container_inter1 = st.container()

        modele_1.header(":brain: Survival Analysis")
        modele_1des.markdown("""**L‚Äôanalyse de survie** est une m√©thode statistique utilis√©e pour pr√©dire combien de temps un √©v√©nement prendra avant de se produire, ou si un √©v√©nement se produira ou non, en fonction de diff√©rentes variables. 
                Pour pr√©dire si une station de ski va fermer ou non, l‚Äôanalyse de survie pourrait √™tre utilis√©e pour mod√©liser la 'dur√©e de vie' d'une station de ski avant qu'elle ne ferme. 
                Contrairement √† d'autres mod√®les qui ne prennent en compte que des donn√©es √† un instant donn√©, l‚Äôanalyse de survie permet de traiter des √©v√©nements qui peuvent se produire √† diff√©rents moments dans le futur et qui peuvent √™tre influenc√©s par des facteurs sur une p√©riode prolong√©e.
                C‚Äôest une approche id√©ale pour comprendre des √©v√©nements comme la fermeture d'une station de ski, qui peut d√©pendre de multiples facteurs sur une p√©riode donn√©e.""")
        st.write('\n')
        st.subheader(":question: Interpr√©tation des r√©sultats", divider="gray")

        interpretation_text = st.container()
        with interpretation_text:
            st.markdown("""
            La courbe de survie utilis√©e dans l‚Äôinterpr√©tation de nos r√©sultats est un graphique utilis√© principalement dans les domaines o√π l'on analyse le temps jusqu'√† un √©v√©nement d'int√©r√™t.

            L'objectif principal de la courbe de survie est de repr√©senter graphiquement la probabilit√© qu'un individu (ou un √©l√©ment) survive au-del√† d'un certain moment dans le temps, en fonction des donn√©es observ√©es.

            Dans notre cas, la courbe de survie montre le temps jusqu'√† la fermeture d√©finitive de la station de ski. Le graphique repr√©sente la probabilit√© de survie de la station.

            - **Axe des x (horizontal)** : il repr√©sente le temps en ann√©es √† partir de 2025.  
            - **Axe des y (vertical)** : il repr√©sente la probabilit√© de survie, c'est-√†-dire la probabilit√© que l'√©v√©nement d'int√©r√™t ne se produise pas √† ce moment-l√†. Elle varie de 0 √† 1, o√π 0 signifie que la station ferme et 1 que la station ‚Äúsurvive‚Äù.
            """)

    with col_analyse2:
        container_res1 = st.container()
        container_res1.header(":trophy: R√©sultats")
        img_modele_1 = st.container()

        def plot_survival_curves(df):
            if df.empty:
                st.write("Les donn√©es sont vides !")
                return

            plt.figure(figsize=(12, 8))

            for idx, row in df.iterrows():
                survie_values = row.iloc[0:65].values[::2]
                station_name = row['station']
                plt.plot(survie_values, label=station_name)

            plt.title("Courbes de Survie des Stations", fontsize=16)
            plt.xlabel("Ann√©es", fontsize=12)
            plt.ylabel("Probabilit√© de Survie", fontsize=12)
            plt.legend(loc='best', bbox_to_anchor=(1, 1))
            plt.grid(True)
            plt.tight_layout()

            st.pyplot(plt)

        def show_survival_curves(df_result):
            if df_result.empty:
                st.write("Les donn√©es sont vides !")
                return

            station_names = df_result['station'].tolist()
            selected_stations = st.multiselect("Choisir les stations √† afficher", station_names)
            df_filtered = df_result[df_result['station'].isin(selected_stations)]

            if df_filtered.empty:
                st.write("Aucune station s√©lectionn√©e.")
                return

            plot_survival_curves(df_filtered)

        show_survival_curves(df_result)
